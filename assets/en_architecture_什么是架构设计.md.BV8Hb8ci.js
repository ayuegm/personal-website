import{_ as t,c as i,o as a,ag as n}from"./chunks/framework.CkHWihve.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{"prev":{"link":"en/architecture/什么是架构设计"},"next":{"link":"en/architecture/什么是架构设计"}},"headers":[],"relativePath":"en/architecture/什么是架构设计.md","filePath":"en/architecture/什么是架构设计.md","lastUpdated":1725508141000}'),o={name:"en/architecture/什么是架构设计.md"};function r(s,e,c,l,h,d){return a(),i("div",null,e[0]||(e[0]=[n('<h2 id="i-what-is-architecture-and-architecture-essence" tabindex="-1">I. What is architecture and architecture essence <a class="header-anchor" href="#i-what-is-architecture-and-architecture-essence" aria-label="Permalink to &quot;I. What is architecture and architecture essence&quot;">​</a></h2><p>In the software industry, there is a lot of debate about what architecture is, and everyone has their own interpretation. The structure that you speak of and the structure that you understand are not necessarily the same thing. Therefore, before we discuss architecture, we first discuss the conceptual definition of architecture. Concept is the basis for people to know the world and the means to communicate. If the understanding of the concept of architecture is not the same, the communication is naturally not smooth.</p><p>Linux has an architecture, MySQL has an architecture, the JVM also has an architecture, the use of Java development, MySQL storage, running on Linux business system also has an architecture, which should be concerned about? To clarify the above issues, we need to comb through several related and similar concepts: system and subsystem, module and construction, framework and architecture:</p><p>**1.1. Systems and subsystems **</p><div class="warning custom-block"><p class="custom-block-title">System</p><p>System: Generally refers to a group of related individuals, operating according to certain rules, capable of doing work that individual components cannot do independently.</p><p>Subsystem: Also a system composed of a group of related individuals, most often part of a larger system.</p></div><p>**1.2. Modules and Components **</p><p>It&#39;s all part of the system, just taking it apart from different angles. A module is a logical unit and a component is a physical unit.</p><p>The module is to decompose the system logically, that is, divide and rule, and simplify complex problems. The granularity of a module can be large or small, it can be a system, several subsystems, a service, a function, a class, a method, a functional block, and so on.</p><p>Components can include application services, databases, networks, physical machines, and technical components such as MQ, containers, and Nginx.</p><p>**1.3. Framework and architecture **</p><p>Framework is the specification of component implementation, such as: MVC, MVP, MVVM, etc., is to provide basic functions of the product, such as open source framework: Ruby on Rails, Spring, Laravel, Django, etc., which can be used directly or on the basis of secondary development.</p><p>A framework is a specification and an architecture is a structure.</p><p>I redefine architecture here: Software architecture refers to the top-level structure of a software system.</p><p>Architecture is the most reasonable decision under the constraints of existing resources after systematic thinking and weighing advantages and disadvantages, and the final clear system skeleton: including subsystems, modules, and components. And the relationships between them, the constraints, the guidelines. And use it to guide everyone in the team to be aligned on a mental level. It involves four aspects:</p><ol><li>Rational decision-making of systematic thinking: such as technology selection, solution, etc.</li><li>Clear system skeleton: Clarify what parts of the system are made up of.</li><li>System collaboration relationships: How the various components work together to fulfill business requests.</li><li>Constraint specifications and guiding principles: ensure orderly, efficient and stable operation of the system.</li></ol><p>Therefore, the architect has the ability to: ** understand the business, control the whole situation, select the right technology, solve key problems, and guide the implementation of research and development **.</p><p>The essence of architecture is to restructure the system in order to meet the current business development, and can be rapidly expanded.</p><p>What kind of system to consider architecture design technology does not come out of nowhere and self-driven development, and the development and requirements of the architecture are based on business drivers.</p><p>Architecture is all about the business,</p><ol><li>The requirements are relatively complex.</li><li>Non-functional requirements play an important role in the whole system.</li><li>Long system life cycle and scalability requirements.</li><li>The system is based on component or integration needs.</li><li>The need for business process reengineering.</li></ol><h2 id="ii-architectural-layering-and-classification" tabindex="-1">II. Architectural layering and classification <a class="header-anchor" href="#ii-architectural-layering-and-classification" aria-label="Permalink to &quot;II. Architectural layering and classification&quot;">​</a></h2><p>Architecture can be subdivided into business architecture, application architecture, technology architecture, code architecture, and deployment architecture</p><p>! [What is real architecture design?] (<a href="https://segmentfault.com/img/remote/1460000023122585" target="_blank" rel="noreferrer">https://segmentfault.com/img/remote/1460000023122585</a> &quot;what is the real architecture design?&quot; )</p><p>Business architecture is strategy, application architecture is tactics, and technology architecture is equipment. Among them, the application architecture connects the top and bottom, on the one hand, to undertake the landing of the business architecture, on the other hand, affects the technology selection.</p><p>Get familiar with the business, form the business architecture, make the corresponding application architecture according to the business architecture, and finally implement the technical architecture.</p><p>How to choose the right application architecture for the current needs, how to face the future and ensure the smooth transition of the architecture, this is a problem that software developers, especially architects, need to think deeply about.</p><p>**2.1. Business Architecture (Overhead architecture) ** :</p><p>Including business planning, business modules, business processes, the business of the whole system is divided, the domain model is designed, and the real business is transformed into abstract objects.</p><p>There is no optimal architecture, only the most suitable architecture, all system design principles should be to solve business problems as the ultimate goal, from the actual business of the technical feelings of the framework will often bring the system into the pit, any not based on the business to do whimsical architecture is a rogue.</p><p>The premise of all the problems is to understand how much business we are facing today, what is the growth trend, and the process of solving high concurrency must be a gradual process. A reasonable architecture that can anticipate business development 1 to 2 years in advance is appropriate. This can pay a more reasonable price in exchange for the real effect of technology-led business growth.</p><p>Take a look at Jingdong business structure (online share picture) :</p><p>! [What is real architecture design?] (<a href="https://segmentfault.com/img/remote/1460000023122586" target="_blank" rel="noreferrer">https://segmentfault.com/img/remote/1460000023122586</a> &quot;what is the real architecture design?&quot; )</p><p>**2.2. Application Architecture (Profile architecture, also known as logic architecture diagram) ** :</p><p>Hardware-to-application abstraction, including abstraction layers and programming interfaces. Application architecture and business architecture are mutually reinforcing. Every part of the business architecture has an application architecture.</p><p>Similar:</p><p>! [What is real architecture design?] (<a href="https://segmentfault.com/img/remote/1460000023122587" target="_blank" rel="noreferrer">https://segmentfault.com/img/remote/1460000023122587</a> &quot;what is the real architecture design?&quot; )</p><p>Application architecture: As an independent deployable unit, an application divides a clear boundary for the system and profoundly affects the functional organization, code development, deployment, and operation and maintenance of the system. The application architecture defines which applications are in the system and how they work together. The so-called application here is the various logic modules or subsystems.</p><p>There are two key points in the application architecture diagram:</p><p>Division of responsibilities: Clear application (each logic module or subsystem) boundaries</p><ul><li>Logical layering</li><li>Subsystem and module definition.</li><li>Key class.</li></ul><ol start="2"><li>Collaboration between responsibilities:</li></ol><ul><li>Interface protocol: indicates the output interface of the application.</li><li>Collaboration: indicates the calling relationship between applications.</li></ul><p>There are two ways to apply layering:</p><p>One is horizontal (horizontal), according to the functional processing order to divide the application, such as the system is divided into web front-end/intermediate services/background tasks, which is a business-oriented depth of division. The other is vertical division (vertical), according to different business types of application, such as the purchase, sales and inventory system can be divided into three independent applications, which is oriented to the breadth of business division.</p><p>Application cooperation reflects how applications cooperate to complete complex business cases, which is mainly reflected in the communication mechanism and data format between applications. The communication mechanism can be synchronous call/asynchronous message/shared DB access, etc., and the data format can be text /XML/JSON/ binary.</p><p>The division of the application is biased towards the business and reflects the business architecture, while the combination of the application is biased towards the technology and affects the technical architecture. The business complexity is reduced, the system is more ordered, and the technical complexity is increased, the system is more disorderly.</p><p>The essence of application architecture is to balance business and technical complexity through system fragmentation to ensure that the system is not dispersed.</p><p>What kind of application architecture the system adopts is affected by the complexity of the business, including the development stage and business characteristics of the enterprise; IT is also affected by technical complexity, including the stage of IT technology development and the level of internal technical personnel. Service complexity (including large service volumes) inevitably leads to technical complexity. The application architecture aims to solve the service complexity while avoiding too much technical complexity and ensuring the implementation of the service architecture.</p><p>**2.3. Data architecture **</p><p>Data architecture guides database design. Consider not only the database and entity model involved in the development, but also the design of the data storage in the physical architecture.</p><p>! [What is real architecture design?] (<a href="https://segmentfault.com/img/remote/1460000023122590" target="_blank" rel="noreferrer">https://segmentfault.com/img/remote/1460000023122590</a> &quot;what is the real architecture design?&quot; )</p><p>**2.4. Code Architecture (also called Development architecture) ** :</p><p>Subsystem code architecture mainly provides practical guidance for developers, if the code architecture design is insufficient, it will cause the architecture design that affects the whole world. For example, different development teams within the company use different technology stacks or components, and the result is that the overall architectural design of the company can get out of control.</p><p>Code architecture main definitions:</p><p>①. Code unit:</p><ul><li>Configuration design</li><li>Framework, class library.</li></ul><p>②. Code unit organization:</p><ul><li>Coding specifications, coding conventions.</li><li>Project module division</li><li>Top-level file structure design, such as mvc design.</li><li>Dependency</li></ul><p>! [What is real architecture design?] (<a href="https://segmentfault.com/img/remote/1460000023122588" target="_blank" rel="noreferrer">https://segmentfault.com/img/remote/1460000023122588</a> &quot;what is the real architecture design?&quot; )</p><p>**2.5. Technical Architecture **</p><p>Technical architecture: Determine the actual running components that make up the application (lvs, nginx, tomcat, php-fpm, etc.), the relationships between these running components, and the strategy for deploying them to hardware.</p><p>The technical architecture mainly considers the non-functional characteristics of the system, and makes system-level grasp of the system&#39;s high availability, high performance, expansion, security, scalability, simplicity, etc.</p><p>The design of system architecture requires the architect to have a solid knowledge of the functionality and performance of software and hardware, which is the most difficult part of the architecture design work.</p><p>**2.6. Deployment topology Diagram (actual physical diagram) ** :</p><p>Topology architecture, including the deployment of several nodes of the architecture, the relationship between nodes, the high availability of servers, network interfaces and protocols, etc., determines how the application runs, the performance of the operation, maintainability, scalability, and is the basis of all architectures. This figure is the main focus of O&amp;M engineers.</p><p>! [What is real architecture design?] (<a href="https://segmentfault.com/img/remote/1460000023122589" target="_blank" rel="noreferrer">https://segmentfault.com/img/remote/1460000023122589</a> &quot;what is the real architecture design?&quot; )</p><p>The physical architecture mainly considers hardware selection and topology, software-to-hardware mapping, and the interaction between hardware and software.</p><p>! [What is real architecture design?] (<a href="https://segmentfault.com/img/remote/1460000023122591" target="_blank" rel="noreferrer">https://segmentfault.com/img/remote/1460000023122591</a> &quot;what is the real architecture design?&quot; )</p><h2 id="iii-architecture-level" tabindex="-1">III. Architecture level <a class="header-anchor" href="#iii-architecture-level" aria-label="Permalink to &quot;III. Architecture level&quot;">​</a></h2><p>We use the architectural level of the pyramid to illustrate that the upper level contains the lower level:</p><p>! [What is real architecture design?] (<a href="https://segmentfault.com/img/remote/1460000023122592" target="_blank" rel="noreferrer">https://segmentfault.com/img/remote/1460000023122592</a> &quot;what is the real architecture design?&quot; )</p><ul><li>** System-level ** : that is, the relationship between the parts of the whole system and how to govern it: Stratification</li><li>** Application level ** : that is, the overall architecture of a single application, and its relationship with a single application in the system.</li><li>** Module level ** : that is, the internal module architecture of the application, such as the modularization of code, data and state management.</li><li>** Code level ** : That is, from the code level guarantee architecture implementation.</li></ul><p>** Strategic design and Tactical design **</p><p>Based on the architecture pyramid, we have the perfect combination of strategic design and tactical design of the system architecture:</p><ul><li>** Strategic Design ** : Business architecture is used to guide the architect on how to design the system architecture.</li><li>** Tactical Design ** : Application architecture should be designed according to business architecture.</li><li>** Tactical implementation ** : After the application architecture is determined, it is the technology selection.</li></ul><p>! [What is real architecture design?] (<a href="https://segmentfault.com/img/remote/1460000023122594" target="_blank" rel="noreferrer">https://segmentfault.com/img/remote/1460000023122594</a> &quot;what is the real architecture design?&quot; )</p><ol start="4"><li>Evolution of application architecture</li></ol><p>Business architecture is productivity, application architecture is production relations, and technology architecture is production tools. The business architecture determines the application architecture, and the application architecture needs to adapt to the business architecture and evolve with the business architecture. At the same time, the application architecture relies on the technology architecture to finally land.</p><p>! [What is real architecture design?] (<a href="https://segmentfault.com/img/remote/1460000023122593" target="_blank" rel="noreferrer">https://segmentfault.com/img/remote/1460000023122593</a> &quot;what is the real architecture design?&quot; )</p><p>Architecture evolution path: Single application → distributed application service → Microservice</p><p>**4.1. Single application **</p><p>At the beginning of the enterprise, the business is relatively simple, only a simple scenario is applied, and the application service supports data addition, deletion, modification and check and simple logic. Single application can meet the requirements.</p><p>Typical three-level architecture, front-end (Web/ mobile) + intermediate business logic layer + database layer. This is a typical Java Spring MVC or Python Django framework application. Its architecture diagram is shown below:</p><p>! [What is real architecture design?] (<a href="https://segmentfault.com/img/remote/1460000023122595" target="_blank" rel="noreferrer">https://segmentfault.com/img/remote/1460000023122595</a> &quot;what is the real architecture design?&quot; )</p><p>Approaches for monomer applications, non-functional requirements:</p><ol><li>Performance requirements: Use caching to improve performance</li><li>Concurrency requirements: Use clusters to improve concurrency</li><li>Read/write separation: read/write separation of the database</li><li>Use reverse proxies and cdn acceleration</li><li>Use distributed files and distributed databases</li></ol><p>Monolithic applications are easier to deploy and test, and work well in the early stages of a project. However, as demand continues to increase and more and more people join the development team, the codebase is also expanding rapidly. Slowly, the single application becomes more and more bloated, the maintainability and flexibility are gradually reduced, and the maintenance cost is becoming higher and higher. Here are some disadvantages of monolithic applications:</p><ul><li>** High complexity ** : Taking a single application of millions of lines as an example, the entire project contains very many modules, the boundaries of modules are fuzzy, the dependencies are not clear, the code quality is uneven, and the confusion is piled together. As you can imagine, the whole project is very complicated. Every time you change the code, even adding a simple feature, or fixing a Bug will introduce an implicit flaw.</li><li>** Technical debt ** : As time goes by, requirements change and personnel change, the technical debt of the application will gradually form and accumulate. &quot;Don&#39;t break, don&#39;t fix&quot;, this is very common in software development, and this idea is even more common in monolithic applications. A used system design or code is difficult to modify because other modules in the application may use it in unexpected ways.</li><li>** Low deployment frequency ** : As the code increases, the build and deployment time increases. In monolithic applications, each feature change or bug fix results in the need to redeploy the entire application. Full deployment takes a long time, has a large impact, and is high in risk. As a result, single application projects are rarely deployed online. The low deployment frequency leads to a large number of functional changes and bug fixes between releases, and the error rate is relatively high.</li><li>** Poor reliability ** : An application Bug, such as a dead loop or memory overflow, may cause the entire application to crash.</li><li>** Limited expansion ability ** : A single application can only be expanded as a whole, and cannot be scaled according to the needs of the business module. For example, some modules in the application are computationally intensive and require a powerful CPU. Some modules are IO intensive and require more memory. As these modules are deployed together, compromises have to be made in the choice of hardware. ** Hinder technological innovation ** : Single applications often use a unified technology platform or solution to solve all problems, every member of the team must use the same development language and framework, it is very difficult to introduce a new framework or a new technology platform.</li></ul><p>**4.2. Distributed **</p><p>With the deepening of the business, the business requires more and more product functions, and the logic of each business module becomes more complex, and the depth and breadth of the business increase, making the single application become more and more bloated, the maintainability and flexibility gradually reduce, the development cycle of adding new functions becomes longer and longer, and the maintenance cost becomes higher and higher.</p><p>At this time, it is necessary to split the system according to business function modules, and turn each module into a distributed system. Service modules are deployed on different servers and communicate with each other through interfaces.</p><p>Compared with the single architecture, this architecture provides the ability of load balancing, greatly improves the system load capacity, and solves the needs of high concurrency of the website. There are also the following features:</p><ul><li>** Reduces the coupling degree ** : Split the module, use interface communication, reduce the coupling degree between the modules.</li><li>** Clear responsibility ** : Divide the project into several sub-projects, with different teams responsible for different sub-projects.</li><li>** Easy to expand ** : Only need to add a subproject when increasing the function, call the interface of other systems can be.</li><li>** Easy deployment ** : Flexible distributed deployment.</li><li>** Improve code reusability ** : For example, if the Service layer does not adopt the distributed rest Service architecture, a service layer logic will be written on each end of the mobile Wap mall, wechat mall, PC, Android and iOS. The development is large and it is difficult to maintain and upgrade together. At this time, distributed rest service mode can be adopted. Share a service layer.</li></ul>',93)]))}const m=t(o,[["render",r]]);export{u as __pageData,m as default};
